# Lead Scoring Dashboard

This project implements a single-page application (SPA) for scoring real estate leads using a React frontend with Tailwind CSS and a FastAPI backend. It includes a machine learning model (GradientBoostingClassifier) for initial scoring and a rule-based reranker to adjust scores based on comments. The application is responsive, supports at least 5 input fields plus a comments field and consent checkbox, and displays leads in a table with at least 3 fields plus comments.

## Project Overview

| Section | Description |
|---------|-------------|
| **Purpose** | Build a lead scoring dashboard for real estate leads, fulfilling the AI Lead Intent Score Assignment requirements. |
| **Frontend** | React SPA with Tailwind CSS, featuring a form (Email, Credit Score, Income, Budget, Preferred Location, Comments, Consent) and a table (Email, Initial Score, Reranked Score, Comments). |
| **Backend** | FastAPI server with a `/score` endpoint, using a pre-trained GradientBoostingClassifier and a rule-based reranker. |
| **Dataset** | `real_estate_leads.csv` with columns: `phone_number`, `email`, `credit_score`, `age_group`, `family_background`, `income`, `property_type`, `budget`, `preferred_location`, `comments`, `lead_intent`. |
| **Model** | GradientBoostingClassifier trained on numerical and categorical features, achieving ~74.25% accuracy (as reported). |
| **Reranker** | Adjusts scores based on comments: +10 for positive keywords (e.g., "urgent"), -10 for negative keywords (e.g., "just exploring"). |

## Directory Structure

| Path | Description |
|------|-------------|
| `frontend/` | Contains React frontend files. |
| `frontend/public/index.html` | Entry HTML file for the React app. |
| `frontend/src/App.jsx` | Main React component with form and table. |
| `frontend/src/index.js` | Renders the React app. |
| `frontend/src/styles.css` | Custom CSS with Tailwind integration. |
| `frontend/package.json` | Node.js dependencies and scripts. |
| `frontend/tailwind.config.js` | Tailwind CSS configuration. |
| `backend/` | Contains FastAPI backend files. |
| `backend/main.py` | FastAPI server with `/score` endpoint. |
| `backend/train_model.py` | Script to train and save the machine learning model. |
| `backend/requirements.txt` | Python dependencies for the backend. |
| `backend/model/lead_scoring_model.joblib` | Pre-trained model file (generated by `train_model.py`). |
| `data/real_estate_leads.csv` | Dataset for training and scoring. |
| `README.md` | This documentation file. |

## Prerequisites

| Requirement | Version | Installation Command |
|-------------|---------|----------------------|
| Python | 3.8+ | Download from [python.org](https://www.python.org/downloads/) |
| Node.js | 14+ | Download from [nodejs.org](https://nodejs.org/) |
| npm | 6+ | Installed with Node.js |
| Browser | Modern (Chrome, Firefox, etc.) | N/A |
| Dataset | `real_estate_leads.csv` | Place in `data/` directory |

## Setup Instructions

### Backend Setup

| Step | Command (PowerShell) | Description |
|------|----------------------|-------------|
| 1. Navigate to backend | `cd backend` | Move to `backend` directory. |
| 2. Create virtual environment | `python -m venv venv` | Create a Python virtual environment. |
| 3. Activate virtual environment | `.\venv\Scripts\activate` | Activate the environment (Windows). Use `source venv/bin/activate` on Unix/Linux/Mac. |
| 4. Install dependencies | `pip install -r requirements.txt` | Install `fastapi==0.68.0`, `uvicorn==0.15.0`, `pandas==1.3.0`, `scikit-learn==0.24.2`, `joblib==1.0.1`. |
| 5. Train the model | `python train_model.py` | Generates `model/lead_scoring_model.joblib`. Expected output: "Model accuracy: ~0.7425". |
| 6. Start FastAPI server | `uvicorn main:app --reload` | Runs server at `http://localhost:8000`. Keep terminal open. |

### Frontend Setup

| Step | Command (PowerShell) | Description |
|------|----------------------|-------------|
| 1. Navigate to frontend | `cd frontend` | Move to `frontend` directory. |
| 2. Install dependencies | `npm install` | Install React and Tailwind dependencies. |
| 3. Initialize Tailwind | `npx tailwindcss init` | Generates `tailwind.config.js` (already provided). |
| 4. Start React server | `npm start` | Runs frontend at `http://localhost:3000`. Opens browser automatically. |

## Usage

| Task | Instructions |
|------|--------------|
| **Access Dashboard** | Open `http://localhost:3000` in a browser after starting the React server. |
| **Submit Lead** | Fill the form: <br> - Email (e.g., `test@example.com`) <br> - Credit Score (300-850, e.g., `750`) <br> - Income (INR, e.g., `600000`) <br> - Budget (INR, e.g., `2500000`) <br> - Preferred Location (e.g., `Noida`) <br> - Comments (e.g., `Urgent visit required`) <br> - Check "I consent to data processing". <br> Click "Submit". |
| **View Results** | Table updates with: <br> - Email <br> - Initial Score (0-100, from model) <br> - Reranked Score (adjusted by comments) <br> - Comments. <br> Leads persist in local storage. |
| **Test Responsiveness** | Resize browser or use mobile view (F12 → Toggle Device Toolbar). Form stacks vertically, table scrolls horizontally on small screens. |

## Example Input and Output

| Input Field | Example Value |
|-------------|---------------|
| Email | `test@example.com` |
| Credit Score | `750` |
| Income | `600000` |
| Budget | `2500000` |
| Preferred Location | `Noida` |
| Comments | `Urgent visit required` |
| Consent | Checked |

| Output (Table Row) | Example Value |
|--------------------|---------------|
| Email | `test@example.com` |
| Initial Score | `85.23` (model prediction) |
| Reranked Score | `95.23` (+10 for "urgent") |
| Comments | `Urgent visit required` |

## Reranker Logic

| Keyword Type | Keywords | Score Adjustment |
|--------------|----------|------------------|
| Positive | `urgent`, `immediate`, `looking to move`, `call me asap`, `finalizing` | +10 |
| Negative | `not now`, `just exploring`, `budget issue`, `need loan` | -10 |

- Scores are capped between 0 and 100.

## Troubleshooting

| Issue | Possible Cause | Solution |
|-------|----------------|----------|
| "Error connecting to backend" | Backend not running or wrong URL | Ensure `uvicorn main:app --reload` is running. Check `http://localhost:8000/docs`. |
| "Model file not found" | `lead_scoring_model.joblib` missing | Run `python train_model.py` to generate `backend/model/lead_scoring_model.joblib`. |
| Form validation error | Invalid input (e.g., email without `@`, credit score <300 or >850) | Correct input values and ensure consent is checked. |
| Table not updating | JavaScript error or local storage issue | Check browser console (F12 → Console). Avoid incognito mode for local storage. |
| npm start fails | Missing dependencies or Node.js issue | Run `npm install`. Update Node.js or clear cache: `npm cache clean --force`. |
| CORS error | Frontend-backend origin mismatch | Ensure backend CORS allows `http://localhost:3000` (already set in `main.py`). |

## Additional Notes

| Note | Details |
|------|---------|
| **Model Accuracy** | ~74.25% (as reported). Can be improved by tuning `GradientBoostingClassifier` hyperparameters in `train_model.py`. |
| **Form Fields** | Includes 5 fields (Email, Credit Score, Income, Budget, Preferred Location) plus Comments and consent checkbox. Other fields (phone_number, age_group, family_background, property_type) use dummy values for backend compatibility. |
| **Responsiveness** | Tailwind CSS classes (e.g., `md:`, `max-w-4xl`, `overflow-x-auto`) ensure mobile-friendly UI. |
| **Persistence** | Leads stored in browser local storage (frontend) and in-memory `leads_storage` (backend, resets on server restart). |
| **Time Zone** | Instructions assume IST (current time: 03:59 PM, July 13, 2025). |

For further assistance, contact the developer or share error details.